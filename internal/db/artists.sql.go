// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: artists.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countArtists = `-- name: CountArtists :one
SELECT COUNT(*) FROM artists
`

func (q *Queries) CountArtists(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countArtists)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createArtist = `-- name: CreateArtist :one
INSERT INTO artists (name)
VALUES ($1)
RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateArtist(ctx context.Context, name string) (Artist, error) {
	row := q.db.QueryRow(ctx, createArtist, name)
	var i Artist
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteArtist = `-- name: DeleteArtist :exec
DELETE FROM artists
WHERE id = $1
`

func (q *Queries) DeleteArtist(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteArtist, id)
	return err
}

const getArtist = `-- name: GetArtist :one
SELECT id, name, created_at, updated_at
FROM artists
WHERE id = $1
`

func (q *Queries) GetArtist(ctx context.Context, id int32) (Artist, error) {
	row := q.db.QueryRow(ctx, getArtist, id)
	var i Artist
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getArtistByName = `-- name: GetArtistByName :one
SELECT id, name, created_at, updated_at
FROM artists
WHERE name = $1
`

func (q *Queries) GetArtistByName(ctx context.Context, name string) (Artist, error) {
	row := q.db.QueryRow(ctx, getArtistByName, name)
	var i Artist
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listArtists = `-- name: ListArtists :many
SELECT id, name, created_at, updated_at
FROM artists
ORDER BY name ASC
`

func (q *Queries) ListArtists(ctx context.Context) ([]Artist, error) {
	rows, err := q.db.Query(ctx, listArtists)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Artist{}
	for rows.Next() {
		var i Artist
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listArtistsWithPagination = `-- name: ListArtistsWithPagination :many
SELECT id, name, created_at, updated_at
FROM artists
ORDER BY name ASC
LIMIT $1 OFFSET $2
`

type ListArtistsWithPaginationParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListArtistsWithPagination(ctx context.Context, arg ListArtistsWithPaginationParams) ([]Artist, error) {
	rows, err := q.db.Query(ctx, listArtistsWithPagination, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Artist{}
	for rows.Next() {
		var i Artist
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchArtistsByName = `-- name: SearchArtistsByName :many
SELECT id, name, created_at, updated_at
FROM artists
WHERE name ILIKE '%' || $1 || '%'
ORDER BY name ASC
`

func (q *Queries) SearchArtistsByName(ctx context.Context, dollar_1 pgtype.Text) ([]Artist, error) {
	rows, err := q.db.Query(ctx, searchArtistsByName, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Artist{}
	for rows.Next() {
		var i Artist
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArtist = `-- name: UpdateArtist :one
UPDATE artists
SET name = $2
WHERE id = $1
RETURNING id, name, created_at, updated_at
`

type UpdateArtistParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateArtist(ctx context.Context, arg UpdateArtistParams) (Artist, error) {
	row := q.db.QueryRow(ctx, updateArtist, arg.ID, arg.Name)
	var i Artist
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
