// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package store

import (
	"context"
	"database/sql"
	"time"
)

const createAPIToken = `-- name: CreateAPIToken :one
INSERT INTO api_tokens (id, user_id, token, name, scopes, expires_at)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id, user_id, token, name, scopes, last_used_at, expires_at, created_at, updated_at
`

type CreateAPITokenParams struct {
	ID        string
	UserID    string
	Token     string
	Name      string
	Scopes    sql.NullString
	ExpiresAt time.Time
}

func (q *Queries) CreateAPIToken(ctx context.Context, arg CreateAPITokenParams) (ApiToken, error) {
	row := q.db.QueryRowContext(ctx, createAPIToken,
		arg.ID,
		arg.UserID,
		arg.Token,
		arg.Name,
		arg.Scopes,
		arg.ExpiresAt,
	)
	var i ApiToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.Name,
		&i.Scopes,
		&i.LastUsedAt,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (id, user_id, token, ip_address, user_agent, expires_at)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id, user_id, token, ip_address, user_agent, expires_at, created_at, updated_at
`

type CreateSessionParams struct {
	ID        string
	UserID    string
	Token     string
	IpAddress sql.NullString
	UserAgent sql.NullString
	ExpiresAt time.Time
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.ID,
		arg.UserID,
		arg.Token,
		arg.IpAddress,
		arg.UserAgent,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.IpAddress,
		&i.UserAgent,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, email, username, password_hash, role, is_active, email_verified)
VALUES (?, ?, ?, ?, ?, 1, 0)
RETURNING id, email, username, password_hash, role, is_active, email_verified, last_login_at, created_at, updated_at
`

type CreateUserParams struct {
	ID           string
	Email        string
	Username     string
	PasswordHash string
	Role         string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Username,
		arg.PasswordHash,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.IsActive,
		&i.EmailVerified,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions WHERE token = ?
`

func (q *Queries) DeleteSession(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, deleteSession, token)
	return err
}

const getAPITokenByToken = `-- name: GetAPITokenByToken :one
SELECT id, user_id, token, name, scopes, last_used_at, expires_at, created_at, updated_at FROM api_tokens WHERE token = ? AND expires_at > CURRENT_TIMESTAMP LIMIT 1
`

func (q *Queries) GetAPITokenByToken(ctx context.Context, token string) (ApiToken, error) {
	row := q.db.QueryRowContext(ctx, getAPITokenByToken, token)
	var i ApiToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.Name,
		&i.Scopes,
		&i.LastUsedAt,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSessionByToken = `-- name: GetSessionByToken :one
SELECT id, user_id, token, ip_address, user_agent, expires_at, created_at, updated_at FROM sessions WHERE token = ? AND expires_at > CURRENT_TIMESTAMP LIMIT 1
`

func (q *Queries) GetSessionByToken(ctx context.Context, token string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionByToken, token)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.IpAddress,
		&i.UserAgent,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, username, password_hash, role, is_active, email_verified, last_login_at, created_at, updated_at FROM users WHERE email = ? LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.IsActive,
		&i.EmailVerified,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, username, password_hash, role, is_active, email_verified, last_login_at, created_at, updated_at FROM users WHERE id = ? LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.PasswordHash,
		&i.Role,
		&i.IsActive,
		&i.EmailVerified,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
