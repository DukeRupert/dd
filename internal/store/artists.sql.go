// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: artists.sql

package store

import (
	"context"
	"database/sql"
)

const countArtists = `-- name: CountArtists :one
SELECT COUNT(*) FROM artists
`

func (q *Queries) CountArtists(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countArtists)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createArtist = `-- name: CreateArtist :one
INSERT INTO artists (name)
VALUES (?)
RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateArtist(ctx context.Context, name string) (Artist, error) {
	row := q.db.QueryRowContext(ctx, createArtist, name)
	var i Artist
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteArtist = `-- name: DeleteArtist :exec
DELETE FROM artists
WHERE id = ?
`

func (q *Queries) DeleteArtist(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteArtist, id)
	return err
}

const getArtist = `-- name: GetArtist :one
SELECT id, name, created_at, updated_at
FROM artists
WHERE id = ?
`

func (q *Queries) GetArtist(ctx context.Context, id int64) (Artist, error) {
	row := q.db.QueryRowContext(ctx, getArtist, id)
	var i Artist
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getArtistByName = `-- name: GetArtistByName :one
SELECT id, name, created_at, updated_at
FROM artists
WHERE name = ?
`

func (q *Queries) GetArtistByName(ctx context.Context, name string) (Artist, error) {
	row := q.db.QueryRowContext(ctx, getArtistByName, name)
	var i Artist
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listArtists = `-- name: ListArtists :many
SELECT id, name, created_at, updated_at
FROM artists
ORDER BY name ASC
`

func (q *Queries) ListArtists(ctx context.Context) ([]Artist, error) {
	rows, err := q.db.QueryContext(ctx, listArtists)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Artist
	for rows.Next() {
		var i Artist
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listArtistsWithPagination = `-- name: ListArtistsWithPagination :many
SELECT id, name, created_at, updated_at
FROM artists
ORDER BY name ASC
LIMIT ? OFFSET ?
`

type ListArtistsWithPaginationParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) ListArtistsWithPagination(ctx context.Context, arg ListArtistsWithPaginationParams) ([]Artist, error) {
	rows, err := q.db.QueryContext(ctx, listArtistsWithPagination, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Artist
	for rows.Next() {
		var i Artist
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchArtistsByName = `-- name: SearchArtistsByName :many
SELECT id, name, created_at, updated_at
FROM artists
WHERE name LIKE '%' || ? || '%'
ORDER BY name ASC
`

func (q *Queries) SearchArtistsByName(ctx context.Context, dollar_1 sql.NullString) ([]Artist, error) {
	rows, err := q.db.QueryContext(ctx, searchArtistsByName, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Artist
	for rows.Next() {
		var i Artist
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArtist = `-- name: UpdateArtist :one
UPDATE artists
SET name = ?
WHERE id = ?
RETURNING id, name, created_at, updated_at
`

type UpdateArtistParams struct {
	Name string
	ID   int64
}

func (q *Queries) UpdateArtist(ctx context.Context, arg UpdateArtistParams) (Artist, error) {
	row := q.db.QueryRowContext(ctx, updateArtist, arg.Name, arg.ID)
	var i Artist
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
