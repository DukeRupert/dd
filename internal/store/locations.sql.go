// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: locations.sql

package store

import (
	"context"
	"database/sql"
)

const countLocations = `-- name: CountLocations :one
SELECT COUNT(*) FROM locations
`

func (q *Queries) CountLocations(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countLocations)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createLocation = `-- name: CreateLocation :one
INSERT INTO locations (name, description, is_default)
VALUES (?, ?, ?)
RETURNING id, name, description, is_default, created_at, updated_at
`

type CreateLocationParams struct {
	Name        string
	Description sql.NullString
	IsDefault   sql.NullBool
}

func (q *Queries) CreateLocation(ctx context.Context, arg CreateLocationParams) (Location, error) {
	row := q.db.QueryRowContext(ctx, createLocation, arg.Name, arg.Description, arg.IsDefault)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteLocation = `-- name: DeleteLocation :exec
DELETE FROM locations
WHERE id = ?
`

func (q *Queries) DeleteLocation(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteLocation, id)
	return err
}

const getDefaultLocation = `-- name: GetDefaultLocation :one
SELECT id, name, description, is_default, created_at, updated_at
FROM locations
WHERE is_default = 1
LIMIT 1
`

func (q *Queries) GetDefaultLocation(ctx context.Context) (Location, error) {
	row := q.db.QueryRowContext(ctx, getDefaultLocation)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLocation = `-- name: GetLocation :one
SELECT id, name, description, is_default, created_at, updated_at
FROM locations
WHERE id = ?
`

func (q *Queries) GetLocation(ctx context.Context, id int64) (Location, error) {
	row := q.db.QueryRowContext(ctx, getLocation, id)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLocationByName = `-- name: GetLocationByName :one
SELECT id, name, description, is_default, created_at, updated_at
FROM locations
WHERE name = ?
`

func (q *Queries) GetLocationByName(ctx context.Context, name string) (Location, error) {
	row := q.db.QueryRowContext(ctx, getLocationByName, name)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listLocations = `-- name: ListLocations :many
SELECT id, name, description, is_default, created_at, updated_at
FROM locations
ORDER BY name ASC
`

func (q *Queries) ListLocations(ctx context.Context) ([]Location, error) {
	rows, err := q.db.QueryContext(ctx, listLocations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Location
	for rows.Next() {
		var i Location
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.IsDefault,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLocationsWithPagination = `-- name: ListLocationsWithPagination :many
SELECT id, name, description, is_default, created_at, updated_at
FROM locations
ORDER BY name ASC
LIMIT ? OFFSET ?
`

type ListLocationsWithPaginationParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) ListLocationsWithPagination(ctx context.Context, arg ListLocationsWithPaginationParams) ([]Location, error) {
	rows, err := q.db.QueryContext(ctx, listLocationsWithPagination, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Location
	for rows.Next() {
		var i Location
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.IsDefault,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchLocationsByName = `-- name: SearchLocationsByName :many
SELECT id, name, description, is_default, created_at, updated_at
FROM locations
WHERE name LIKE '%' || ? || '%'
ORDER BY name ASC
`

func (q *Queries) SearchLocationsByName(ctx context.Context, dollar_1 sql.NullString) ([]Location, error) {
	rows, err := q.db.QueryContext(ctx, searchLocationsByName, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Location
	for rows.Next() {
		var i Location
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.IsDefault,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setDefaultLocation = `-- name: SetDefaultLocation :exec
UPDATE locations
SET is_default = CASE
    WHEN id = ? THEN 1
    ELSE 0
END
`

func (q *Queries) SetDefaultLocation(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, setDefaultLocation, id)
	return err
}

const updateLocation = `-- name: UpdateLocation :one
UPDATE locations
SET name = ?, description = ?, is_default = ?
WHERE id = ?
RETURNING id, name, description, is_default, created_at, updated_at
`

type UpdateLocationParams struct {
	Name        string
	Description sql.NullString
	IsDefault   sql.NullBool
	ID          int64
}

func (q *Queries) UpdateLocation(ctx context.Context, arg UpdateLocationParams) (Location, error) {
	row := q.db.QueryRowContext(ctx, updateLocation,
		arg.Name,
		arg.Description,
		arg.IsDefault,
		arg.ID,
	)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateLocationName = `-- name: UpdateLocationName :one
UPDATE locations
SET name = ?
WHERE id = ?
RETURNING id, name, description, is_default, created_at, updated_at
`

type UpdateLocationNameParams struct {
	Name string
	ID   int64
}

func (q *Queries) UpdateLocationName(ctx context.Context, arg UpdateLocationNameParams) (Location, error) {
	row := q.db.QueryRowContext(ctx, updateLocationName, arg.Name, arg.ID)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
